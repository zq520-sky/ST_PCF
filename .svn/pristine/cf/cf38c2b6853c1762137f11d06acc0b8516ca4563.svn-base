package com.samton.web.manage.finance.controller;

import com.samton.platform.framework.base.BaseController;
import com.samton.platform.framework.constant.WebConstant;
import com.samton.platform.framework.mybatis.pagination.Pagination;
import com.samton.platform.framework.util.CurrentUtil;
import com.samton.platform.pm.bean.entity.TSysLog;
import com.samton.platform.pm.constant.PmStateConstant;
import com.samton.platform.pm.service.ILogService;
import com.samton.web.manage.finance.bean.entity.TCustAccountCredit;
import com.samton.web.manage.finance.bean.excel.CustAccountCreditEntity;
import com.samton.web.manage.finance.bean.vo.CustAccountCreditVo;
import com.samton.web.manage.finance.service.ICustAccountCreditService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import javax.annotation.Resource;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @Description: 授信记录Controller
 * @Author: ZhongShengbin
 * @Date: 2020/04/13 16:46
 * Copyright (c) 2019, Samton. All rights reserved
 */
@Controller
@RequestMapping("/manage/finance/")
public class CustAccountCreditController extends BaseController {

    @Resource
    ICustAccountCreditService iCustAccountCreditService;

    @Resource
    ILogService logService;

    /**
     * 客户授信记录分页
     *
     * @param paramBean
     * @param custAccountCreditVo
     * @return
     * @throws Exception
     */
    @RequestMapping("queryCreditInfoList" + WebConstant.PAGE_SUFFIX)
    public String queryFinanceInfoList(Pagination<TCustAccountCredit> paramBean, CustAccountCreditVo custAccountCreditVo) throws Exception {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfParse = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        if (custAccountCreditVo.getCreditTimeBegin() == null) {
            Calendar calendar = Calendar.getInstance();
            Date date = new Date();
            calendar.setTime(date);
            calendar.add(Calendar.DAY_OF_YEAR,-7);
            Date reDate = calendar.getTime();
            custAccountCreditVo.setCreditTimeBegin(sdfParse.parse(sdf.format(reDate) + " 00:00"));
        }
        if (custAccountCreditVo.getCreditTimeEnd() == null) {
            custAccountCreditVo.setCreditTimeEnd(sdfParse.parse(sdf.format(System.currentTimeMillis()) + " 23:59"));
        }
        paramBean.setSearch(custAccountCreditVo);
        Pagination<TCustAccountCredit> pageData = iCustAccountCreditService.queryCreditPageList(paramBean);
        this.addAttr("pageData", pageData);
        return "finance/custCreditManage";
    }
    /**
     * 客户授信记录导出
     * @param paramBean
     * @param custAccountCreditVo
     * @return
     * @throws Exception
     */
    @RequestMapping("/exportCreditInfoList" + WebConstant.BUSINESS_SUFFIX)
    public String exportCreditInfoList(Pagination<TCustAccountCredit> paramBean, CustAccountCreditVo custAccountCreditVo) throws Exception {
        SimpleDateFormat sdfBegin = new SimpleDateFormat("yyyy-MM-01");
        SimpleDateFormat sdfEnd = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfParse = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        if (custAccountCreditVo.getCreditTimeBegin() == null) {
            Calendar calendar = Calendar.getInstance();
            Date date = new Date();
            calendar.setTime(date);
            calendar.add(Calendar.DAY_OF_YEAR,-7);
            Date reDate = calendar.getTime();
            custAccountCreditVo.setCreditTimeBegin(sdfParse.parse(sdfBegin.format(reDate) + " 00:00"));
        }
        if (custAccountCreditVo.getCreditTimeEnd() == null) {
            custAccountCreditVo.setCreditTimeEnd(sdfParse.parse(sdfEnd.format(System.currentTimeMillis()) + " 23:59"));
        }
        paramBean.setSearch(custAccountCreditVo);
        Pagination<CustAccountCreditEntity> list = iCustAccountCreditService.exportCreditPageList(paramBean);
        logService.addLog(new TSysLog(3,"客户授信记录-导出", "导出客户授信记录！"));
        this.export(response, "客户充值记录" + String.format("%1$tY%1$tm%1$td", new Date()), CustAccountCreditEntity.class, list.getData());
        return null;
    }

    /**
     * 客户授信记录查看
     * @param creditId
     * @return
     * @throws Exception
     */
    @RequestMapping("/viewCreditInfoList" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> viewFinance(Integer creditId) throws Exception {
        CustAccountCreditVo custAccountCreditVo = iCustAccountCreditService.selectCreditVoById(creditId);
        return this.getResultMap(true, custAccountCreditVo);
    }

    /**
     * 客户授信记录分页(客户端)
     *
     * @param paramBean
     * @param custAccountCreditVo
     * @return
     * @throws Exception
     */
    @RequestMapping("queryCreditInfoListByCustId" + WebConstant.PAGE_SUFFIX)
    public String queryFinanceInfoListByCustId(Pagination<TCustAccountCredit> paramBean, CustAccountCreditVo custAccountCreditVo) throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfParse = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        if (custAccountCreditVo.getCreditTimeBegin() == null) {
            Calendar calendar = Calendar.getInstance();
            Date date = new Date();
            calendar.setTime(date);
            calendar.add(Calendar.DAY_OF_YEAR,-7);
            Date reDate = calendar.getTime();
            custAccountCreditVo.setCreditTimeBegin(sdfParse.parse(sdf.format(reDate) + " 00:00"));
        }
        if (custAccountCreditVo.getCreditTimeEnd() == null) {
            custAccountCreditVo.setCreditTimeEnd(sdfParse.parse(sdf.format(System.currentTimeMillis()) + " 23:59"));
        }
        custAccountCreditVo.setCustId(CurrentUtil.getCurrentUser().getEnterpriseId());
        paramBean.setSearch(custAccountCreditVo);
        Pagination<TCustAccountCredit> pageData = iCustAccountCreditService.queryCreditPageList(paramBean);
        this.addAttr("pageData", pageData);
        return "finance/custCreditManageCust";
    }
    /**
     * 客户授信记录导出(客户端)
     * @param paramBean
     * @param custAccountCreditVo
     * @return
     * @throws Exception
     */
    @RequestMapping("/exportCreditInfoListByCustId" + WebConstant.BUSINESS_SUFFIX)
    public String exportCreditInfoListByCustId(Pagination<TCustAccountCredit> paramBean, CustAccountCreditVo custAccountCreditVo) throws Exception {
        SimpleDateFormat sdfBegin = new SimpleDateFormat("yyyy-MM-01");
        SimpleDateFormat sdfEnd = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfParse = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        if (custAccountCreditVo.getCreditTimeBegin() == null) {
            Calendar calendar = Calendar.getInstance();
            Date date = new Date();
            calendar.setTime(date);
            calendar.add(Calendar.DAY_OF_YEAR,-7);
            Date reDate = calendar.getTime();
            custAccountCreditVo.setCreditTimeBegin(sdfParse.parse(sdfBegin.format(reDate) + " 00:00"));
        }
        if (custAccountCreditVo.getCreditTimeEnd() == null) {
            custAccountCreditVo.setCreditTimeEnd(sdfParse.parse(sdfEnd.format(System.currentTimeMillis()) + " 23:59"));
        }
        custAccountCreditVo.setCustId(CurrentUtil.getCurrentUser().getEnterpriseId());
        paramBean.setSearch(custAccountCreditVo);
        Pagination<CustAccountCreditEntity> list = iCustAccountCreditService.exportCreditPageList(paramBean);
        logService.addLog(new TSysLog(3,"客户授信记录-导出", "导出客户授信记录！"));
        this.export(response, "客户授信记录" + String.format("%1$tY%1$tm%1$td", new Date()), CustAccountCreditEntity.class, list.getData());
        return null;
    }

    /**
     * 客户授信记录查看(客户端)
     * @param creditId
     * @return
     * @throws Exception
     */
    @RequestMapping("/viewCreditInfoListByCreditId" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> viewFinanceByCustId(Integer creditId) throws Exception {
        CustAccountCreditVo custAccountCreditVo = iCustAccountCreditService.selectCreditVoById(creditId);
        return this.getResultMap(true, custAccountCreditVo);
    }
}
