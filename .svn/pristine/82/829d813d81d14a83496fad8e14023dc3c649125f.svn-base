package com.samton.web.manage.order.controller;

import com.samton.platform.framework.base.BaseController;
import com.samton.platform.framework.constant.WebConstant;
import com.samton.platform.framework.exception.ServiceException;
import com.samton.platform.framework.mybatis.pagination.Pagination;
import com.samton.platform.framework.util.CurrentUtil;
import com.samton.platform.pm.bean.entity.TSysLog;
import com.samton.platform.pm.constant.PmStateConstant;
import com.samton.platform.pm.service.ILogService;
import com.samton.web.manage.order.bean.excel.CustOrderExcel;
import com.samton.web.manage.order.bean.vo.CustOrderDto;
import com.samton.web.manage.order.bean.vo.CustOrderVo;
import com.samton.web.manage.order.constants.CustOrderExpCodeConstants;
import com.samton.web.manage.order.enums.DemandTypeEnums;
import com.samton.web.manage.order.enums.OrderStatusEnums;
import com.samton.web.manage.order.service.ICustOrderService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.*;

/**
 * @ClassName: CustOrderController
 * @Description:
 * @Author: wuzhiqiang
 * @Date: 2020-04-16 18:09
 * @Copyright (c) 2020, Samton. All rights reserved
 **/
@Controller
@RequestMapping("/manage/cust/order/")
public class CustOrderController extends BaseController {

    @Resource
    private ICustOrderService custOrderService;
    @Resource
    private ILogService logService;

    /**
     * 需求订单管理分页（管理端）
     * @author: wuzhiqiang
     * @date: 2020/4/21
     * @param paramBean:
     * @param custOrderVo:
     * @param type: 1: 管理端， 2：客户端
     * @return: java.lang.String
     */
    @RequestMapping("{type}/queryCustOrderList" + WebConstant.PAGE_SUFFIX)
    public String queryCustOrderList(Pagination<CustOrderVo> paramBean, CustOrderVo custOrderVo, @PathVariable("type") Integer type) throws Exception{
        String view = "";
        switch (type){
            case 1:
                view = "order/custOrderManage";
                break;
            case 2:
                custOrderVo.setCustId(CurrentUtil.getCurrentUser().getEnterpriseId());
                view = "order/custOrderClient";
                break;
            default:
                break;
        }
        Date currentDate = new Date();
        Calendar calendar = Calendar.getInstance();
        if(custOrderVo.getReleaseTimeBegin() == null){
            custOrderVo.setReleaseTimeBegin(currentDate);
        }
        if(custOrderVo.getReleaseTimeEnd() == null){
            custOrderVo.setReleaseTimeEnd(currentDate);
        }
        if(custOrderVo.getTaskStartDateBegin() == null){
            custOrderVo.setTaskStartDateBegin(currentDate);
        }
        if(custOrderVo.getTaskStartDateEnd() == null){
            calendar.setTime(currentDate);
            calendar.add(Calendar.MONTH,1);
            Date reDate = calendar.getTime();
            custOrderVo.setTaskStartDateEnd(reDate);
        }
        paramBean.setSearch(custOrderVo);
        Pagination<CustOrderVo> pageData = custOrderService.queryOrderPageList(paramBean);
        this.addAttr("pageData", pageData);
        return view;
    }


    /**
     * 需求订单管理导出（管理端）
     * @author: wuzhiqiang
     * @date: 2020/4/21
     * @param paramBean:
     * @param custOrderVo:
     * @param type: 1:管理端， 2：客户端
     * @return: java.lang.String
     */
    @RequestMapping("{type}/exportCustOrderList" + WebConstant.BUSINESS_SUFFIX)
    public String exportCustOrderList(Pagination<CustOrderVo> paramBean, CustOrderVo custOrderVo, @PathVariable("type") Integer type) throws Exception {

        String moduleName = "";
        String operateDesc = "";
        String sheetName = "";
        switch (type){
            case 1:
                moduleName = "需求订单管理-导出(管理端)";
                operateDesc = "导出需求订单信息(管理端)！";
                sheetName = "客户订单信息管理";
                logService.addLog(new TSysLog(moduleName, operateDesc, PmStateConstant.LOG_PLATFORM));
                break;
            case 2:
                moduleName = "需求订单管理-导出";
                operateDesc = "导出需求订单信息！";
                sheetName = "订单信息管理";
                custOrderVo.setCustId(CurrentUtil.getCurrentUser().getEnterpriseId());
                logService.addLog(new TSysLog(3, moduleName, operateDesc));
                break;
            default:
                break;
        }
        Date currentDate = new Date();
        if(custOrderVo.getReleaseTimeBegin() == null){
            custOrderVo.setReleaseTimeBegin(currentDate);
        }
        if(custOrderVo.getReleaseTimeEnd() == null){
            custOrderVo.setReleaseTimeEnd(currentDate);
        }
        if(custOrderVo.getTaskStartDateBegin() == null){
            custOrderVo.setTaskStartDateBegin(currentDate);
        }
        if(custOrderVo.getTaskStartDateEnd() == null){
            custOrderVo.setTaskStartDateEnd(currentDate);
        }
        paramBean.setSearch(custOrderVo);
        Pagination<CustOrderExcel> list = custOrderService.exportOrderPageList(paramBean);
        this.export(response,"客户需求订单" + String.format("%1$tY%1$tm%1$td", new Date()), CustOrderExcel.class, list.getData());
        return null;
    }

    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/21
     * @param orderId:
     * @return: java.util.Map<java.lang.String,java.lang.Object>
     */
    @RequestMapping("viewCustOrder" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> viewCustomer(Integer orderId) throws Exception {
        CustOrderVo custOrderVo = custOrderService.selectCustOrderById(orderId);
        custOrderVo.setDemandTypeCN(DemandTypeEnums.getDescByState(custOrderVo.getDemandType()));
        custOrderVo.setOrderStateCN(OrderStatusEnums.getDescByState(custOrderVo.getOrderState()));
        return this.getResultMap(true, custOrderVo);
    }

    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/22
     * @param file: 
     * @param type:   1-管理端 2-客户端
     * @return: java.util.Map<java.lang.String,java.lang.Object>
     */
    @RequestMapping("{type}/importOrders" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> importOrders(@RequestParam("file") CommonsMultipartFile file, @PathVariable("type") Integer type) throws Exception {
        Map<String, String> stringStringMap = custOrderService.importOrders(file, type);
        String error = stringStringMap.get("error");
        String name = file.getOriginalFilename();
        TSysLog tSysLog = null;
        if(StringUtils.isBlank(error)){
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-批量导入", "导入客户需求订单【"+name+"】成功 ！", PmStateConstant.LOG_PLATFORM);
            }else{
                tSysLog = new TSysLog(3, "客户需求订单管理-批量导入", "导入客户需求订单【"+name+"】成功 ！");
            }
        }else{
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-批量导入", "导入客户需求订单【"+name+"】失败 ！", PmStateConstant.LOG_PLATFORM);
            }else{
                tSysLog = new TSysLog(3, "客户需求订单管理-批量导入", "导入客户需求订单【"+name+"】失败 ！");
            }
        }
        logService.addLog(tSysLog);
        return this.getResultMap(true, stringStringMap);
    }

    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/22
     * @param custOrderDto:
     * @param type: 1:管理端， 2：客户端
     * @return: java.util.Map<java.lang.String,java.lang.Object>
     */
    @RequestMapping("{type}/addCustOrder" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> addCustOrder(CustOrderDto custOrderDto, @PathVariable("type") Integer type) throws Exception {
        //执行新增
        String orderCode = custOrderService.addCustOrder(custOrderDto);
        TSysLog tSysLog = null;
        if (StringUtils.isNoneBlank(orderCode)) {
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-新增", "新增客户需求订单【" +orderCode+ "】成功 ！", PmStateConstant.LOG_PLATFORM);
            }
            if(type == 2){
                tSysLog = new TSysLog(3, "客户需求订单管理-新增", "新增客户需求订单【" +orderCode+ "】成功 ！");
            }
        } else {
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-新增", "新增客户需求订单【" +orderCode+ "】失败 ！", PmStateConstant.LOG_PLATFORM);
            }
            if(type == 2){
                tSysLog = new TSysLog(3, "客户需求订单管理-新增", "新增客户需求订单【" +orderCode+ "】失败 ！");
            }
        }
        logService.addLog(tSysLog);
        if (StringUtils.isBlank(orderCode)) {
            throw new ServiceException(CustOrderExpCodeConstants.CUST_ORDER_ADD_ERROR);
        }
        return this.getResultMap(true, orderCode);
    }

    @RequestMapping("{type}/cancel" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> cancel(Integer orderId, String orderCode, @PathVariable("type") Integer type) throws Exception {
        boolean cancel = custOrderService.cancel(orderId);
        TSysLog tSysLog = null;
        if(cancel){
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-取消", "取消客户需求订单【" +orderCode+ "】成功 ！", PmStateConstant.LOG_PLATFORM);
            }
            if(type == 2){
                tSysLog = new TSysLog(3, "客户需求订单管理-取消", "取消客户需求订单【" +orderCode+ "】成功 ！");
            }
        }else{
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-取消", "取消客户需求订单【" +orderCode+ "】失败 ！", PmStateConstant.LOG_PLATFORM);
            }
            if(type == 2){
                tSysLog = new TSysLog(3, "客户需求订单管理-取消", "取消客户需求订单【" +orderCode+ "】失败 ！");
            }
        }
        logService.addLog(tSysLog);
        if(!cancel){
            throw new ServiceException(CustOrderExpCodeConstants.CUST_ORDER_CANCEL_ERROR);
        }
        return this.getResultMap(true, null);
    }

    @RequestMapping("{type}/del" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> del(Integer orderId, String orderCode, @PathVariable("type") Integer type) throws Exception {
        boolean del = custOrderService.del(orderId);
        TSysLog tSysLog = null;
        if(del){
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-删除", "删除客户需求订单【" +orderCode+ "】成功 ！", PmStateConstant.LOG_PLATFORM);
            }
            if(type == 2){
                tSysLog = new TSysLog(3, "客户需求订单管理-删除", "删除客户需求订单【" +orderCode+ "】成功 ！");
            }
        }else{
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-删除", "删除客户需求订单【" +orderCode+ "】失败 ！", PmStateConstant.LOG_PLATFORM);
            }
            if(type == 2){
                tSysLog = new TSysLog(3, "客户需求订单管理-删除", "删除客户需求订单【" +orderCode+ "】失败 ！");
            }
        }
        logService.addLog(tSysLog);
        if(!del){
            throw new ServiceException(CustOrderExpCodeConstants.CUST_ORDER_DEL_ERROR);
        }
        return this.getResultMap(true, null);
    }


    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/23
     * @param custOrderDto:
     * @return: java.util.Map<java.lang.String,java.lang.Object>
     */
    @RequestMapping("{type}/updateCustOrder" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> updateCustOrder(CustOrderDto custOrderDto, @PathVariable("type") Integer type) throws Exception {
        //执行更新
        boolean result = custOrderService.updateCustOrder(custOrderDto);
        TSysLog tSysLog = null;
        if (result) {
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-修改", "修改客户需求订单【" +custOrderDto.getOrderCode()+ "】成功 ！", PmStateConstant.LOG_PLATFORM);
            }
            if(type == 2){
                tSysLog = new TSysLog(3, "客户需求订单管理-修改", "修改客户需求订单【" +custOrderDto.getOrderCode()+ "】成功 ！");
            }
        } else {
            if(type == 1){
                tSysLog = new TSysLog("客户需求订单管理-修改", "修改客户需求订单【" +custOrderDto.getOrderCode()+ "】失败 ！", PmStateConstant.LOG_PLATFORM);
            }
            if(type == 2){
                tSysLog = new TSysLog(3, "客户需求订单管理-修改", "修改客户需求订单【" +custOrderDto.getOrderCode()+ "】失败 ！");
            }
        }
        logService.addLog(tSysLog);
        if (!result) {
            throw new ServiceException(CustOrderExpCodeConstants.CUST_ORDER_EDIT_ERROR);
        }
        return this.getResultMap(true, result);
    }

    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/24
     * @param request:
     * @param response:
     * @param type:  1-管理端 2-客户端
     * @return: void
     */
    @RequestMapping("{type}/downloadTemple" + WebConstant.NO_AUTH_SUFFIX)
    public void downloadTemple(HttpServletRequest request, HttpServletResponse response, @PathVariable("type") Integer type) {
        try {
            String fileName = "客户需求模板.xlsx";
            response.setCharacterEncoding("utf-8");
            response.setContentType("multipart/form-data");
            String agent = request.getHeader("USER-AGENT");
            if (agent.contains("MSIE") || agent.contains("Trident")) {
                fileName = java.net.URLEncoder.encode(fileName, "UTF-8");
            } else {
                //非IE浏览器的处理：
                fileName = new String(fileName.getBytes("UTF-8"), "ISO-8859-1");
            }
            response.setHeader("Content-Disposition", "attachment;fileName=" + fileName);

            String tempFile = null;
            if(type == 1){
                tempFile = "templateDownload/custOrder.xlsx";
            }else{
                tempFile = "templateDownload/custOrderClient.xlsx";
            }
            OutputStream outputStream = response.getOutputStream();
            InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream(tempFile);
            byte[] data = new byte[1024];
            int read = 0;
            while ((read = resourceAsStream.read(data)) != -1) {
                outputStream.write(data, 0, read);
            }
            resourceAsStream.close();
            outputStream.close();
        } catch (Exception e) {

        }
    }
}