package com.samton.web.manage.task.service.impl;

import cn.afterturn.easypoi.excel.ExcelImportUtil;
import cn.afterturn.easypoi.excel.entity.ImportParams;
import com.alibaba.fastjson.JSON;
import com.samton.platform.common.service.impl.SuperServiceIntegerImpl;
import com.samton.platform.common.util.DateUtil;
import com.samton.platform.common.util.IdGen;
import com.samton.platform.framework.bean.UserCacheBean;
import com.samton.platform.framework.mybatis.pagination.PageContext;
import com.samton.platform.framework.mybatis.pagination.Pagination;
import com.samton.platform.framework.util.CurrentUtil;
import com.samton.platform.pm.bean.entity.TSysPmUser;
import com.samton.platform.pm.dao.TSysPmUserMapper;
import com.samton.web.manage.buyer.bean.entity.TBuyers;
import com.samton.web.manage.buyer.dao.TBuyersMapper;
import com.samton.web.manage.cust.bean.entity.TCustProduct;
import com.samton.web.manage.cust.dao.TCustProductMapper;
import com.samton.web.manage.finance.bean.vo.CustAccountVo;
import com.samton.web.manage.finance.dao.TCustAccountMapper;
import com.samton.web.manage.order.bean.entity.TCustOrder;
import com.samton.web.manage.order.dao.TCustOrderMapper;
import com.samton.web.manage.task.bean.entity.TCustTask;
import com.samton.web.manage.task.bean.vo.CustTaskExcelVo;
import com.samton.web.manage.task.bean.vo.CustTaskInfoVo;
import com.samton.web.manage.task.bean.vo.CustTaskVo;
import com.samton.web.manage.task.bean.vo.TaskExcelVo;
import com.samton.web.manage.task.dao.TCustTaskMapper;
import com.samton.web.manage.task.service.ICustTaskService;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.*;

/**
 * @Description: 客户消费记录实现类
 * @Author: ZhongShengbin
 * @Date: 2020/04/15 16:31
 * Copyright (c) 2019, Samton. All rights reserved
 */
@Service
public class CustTaskServiceImpl extends SuperServiceIntegerImpl<TCustTaskMapper, TCustTask> implements ICustTaskService {

    @Autowired
    private TCustTaskMapper tCustTaskMapper;

    public static final Logger log = LoggerFactory.getLogger(CustTaskServiceImpl.class);

    @Resource
    private TCustOrderMapper orderMapper;
    @Resource
    private TBuyersMapper buyersMapper;
    @Resource
    private TSysPmUserMapper pmUserMapper;
    @Resource
    private TCustAccountMapper custAccountMapper;
    @Resource
    private TCustProductMapper custProductMapper;

    @Override
    public Pagination<CustTaskVo> queryTaskPageList(Pagination<CustTaskVo> paramBean) throws Exception {
        Pagination<CustTaskVo> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<CustTaskVo> list = mapper.queryPageTaskList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    @Override
    public Pagination<Map<String, Object>> exportTaskPageList(Pagination<CustTaskVo> paramBean) throws Exception {
        Pagination<Map<String, Object>> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<Map<String, Object>> list = mapper.exportTaskInfoList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    @Override
    public CustTaskVo selectTaskVoById(Integer itemId, Integer productId) throws Exception {
        return this.mapper.selectTaskVoById(itemId, productId);
    }

    /**
     * 任务信息分页查询
     * @param paramBean
     * @return
     */
    @Override
    public Pagination<CustTaskInfoVo> queryPageCustTaskInfoList(Pagination<CustTaskInfoVo> paramBean) throws Exception {
        Pagination<CustTaskInfoVo> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<CustTaskInfoVo> list = mapper.queryPageCustTaskInfoList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    /**
     * 任务信息导出
     * @param paramBean
     */
    @Override
    public Pagination<Map<String, Object>> exportPageCustTaskInfoList(Pagination<CustTaskInfoVo> paramBean) throws Exception {
        Pagination<Map<String, Object>> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<Map<String, Object>> list = mapper.exportPageCustTaskInfoList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    /**
     * 任务信息查看
     * @param taskId
     */
    @Override
    public CustTaskInfoVo findCustTaskInfoById(Integer taskId) throws Exception {
        return this.mapper.selectCustTaskInfoById(taskId);
    }

    /**
     * 批量转单
     * @param taskIds
     * @param modifyUserId
     * @param modifyDate
     * @param liableUserId
     * @return
     */
    @Override
    public int updateLiableUserBatchById(Integer[] taskIds, Long modifyUserId, Date modifyDate, Integer liableUserId) throws Exception {
        return this.mapper.updateLiableUserBatchById(taskIds, modifyUserId, modifyDate, liableUserId);
    }

    /**
     * 导入任务
     * @param file
     * @return
     * @throws Exception
     */
    @Transactional(rollbackFor = Exception.class)
    @Override
    public Map<String, String> importTasks(CommonsMultipartFile file) throws Exception {
        Map<String, String> result = new HashMap<>();

        ImportParams params = new ImportParams();
        params.setTitleRows(0);
        params.setHeadRows(1);
        List<CustTaskExcelVo> custTaskExcelVos = ExcelImportUtil.importExcel(file.getInputStream(), CustTaskExcelVo.class, params);
        if (custTaskExcelVos == null || custTaskExcelVos.isEmpty()) {
            log.info("importTasks error, tasks is empty!");
            return null;
        }
        UserCacheBean currentUser = CurrentUtil.getCurrentUser();
        boolean flag = true;
        //先判断
        //订单编号	买家账号代码	订单数量	税收($)	执行日期	应充金额($)	任务负责人	备注
        for(int i=0; i<custTaskExcelVos.size(); i++){
            CustTaskExcelVo custTaskExcelVo = custTaskExcelVos.get(i);
            //1.订单编号、买家账号代码、订单数量、执行日期、应充金额($)、任务负责人 不能为空
            if(StringUtils.isBlank(custTaskExcelVo.getOrderCode()) || StringUtils.isBlank(custTaskExcelVo.getBuyerCode()) ||
                    custTaskExcelVo.getOrderNum() == null || custTaskExcelVo.getExecDate() == null ||
                    custTaskExcelVo.getDepositMoney() == null || StringUtils.isBlank(custTaskExcelVo.getLiableUserName())){
                result.put("error", "第"+(i+2)+"行数据有问题：订单编号、买家账号代码、订单数量、执行日期、应充金额($)、任务负责人不能为空。");
                flag = false;
            }
            //2.订单编号是否存在
            TCustOrder custOrder = null;
            CustAccountVo custAccount = null;
            TCustProduct custProduct = null;
            if(flag){
                custOrder = orderMapper.selectCustOrderByOrderCode(custTaskExcelVo.getOrderCode());
                if(custOrder == null){
                    result.put("error", "第"+(i+2)+"行数据有问题：订单编号【"+custTaskExcelVo.getOrderCode()+"】不存在或订单状态已进行时。");
                    flag = false;
                }
            }
            //3.买家账号是否存在
            TBuyers buyers = null;
            if(flag){
                buyers = buyersMapper.selectBuyerByBuyerCode(custTaskExcelVo.getBuyerCode());
                if(buyers == null){
                    result.put("error", "第"+(i+2)+"行数据有问题：买家账号【"+custTaskExcelVo.getBuyerCode()+"】不存在。");
                    flag = false;
                }
            }
            //4.任务负责人是否存在
            TSysPmUser pmUser = null;
            if(flag){
                pmUser = pmUserMapper.queryUserByUsername(custTaskExcelVo.getLiableUserName());
                if(pmUser == null){
                    result.put("error", "第"+(i+2)+"行数据有问题：任务负责人【"+custTaskExcelVo.getLiableUserName()+"】不存在。");
                    flag = false;
                }
            }

            if (!flag) {
                log.error("import task error, error task info: {}", JSON.toJSONString(custTaskExcelVo));
                return result;
            }
            custAccount = custAccountMapper.selectByCustId(custOrder.getCustId());
            custProduct = custProductMapper.selectByPrimaryKey(custOrder.getProductId());

            //正式插入
            try {
                TCustTask custTask = new TCustTask();
                custTask.setTaskCode(IdGen.getBusinessCode("TSK"+custOrder.getDemandType()));
                custTask.setOrderId(custOrder.getOrderId());
                custTask.setCustId(custOrder.getCustId());
                custTask.setProductId(custOrder.getProductId());
                custTask.setBuyerId(buyers.getBuyerId());
                custTask.setOrderNum(custTaskExcelVo.getOrderNum());
                custTask.setUnitPrice(custOrder.getUnitPrice());
                custTask.setTax(custTaskExcelVo.getTax());

                /*订单金额(元)，每次编辑时需要再计算
                刷单订单金额(元)=刷单数量（默认为1）*商品单价*美元汇率*刷单周期*刷单频次
                采购订单金额(元)=(订单单价*订单数量+税收)*美元汇率*/
                BigDecimal orderMoney = null;
                if(custOrder.getDemandType() == 1){ // 采购
                    orderMoney = custOrder.getUnitPrice().multiply(new BigDecimal(custTaskExcelVo.getOrderNum()))
                            .add(custTaskExcelVo.getTax()).multiply(custAccount.getDollarRate());
                }else{ // 刷单
                    orderMoney = custOrder.getUnitPrice().multiply(new BigDecimal(custTaskExcelVo.getOrderNum()))
                            .multiply(custAccount.getDollarRate()).multiply(new BigDecimal(custOrder.getFrequency()))
                            .multiply(new BigDecimal(custOrder.getCycle()));
                }
                custTask.setOrderMoney(orderMoney);

                //订单号=订单日期&负责人&账号(店铺名称)&客户账号&产品ID&订单数量
                custTask.setOrderSn(DateUtil.formatDatetime(custTaskExcelVo.getExecDate(),"yyyyMMdd")+
                        custTaskExcelVo.getLiableUserName()+buyers.getBuyerCode()+custProduct.getAccountsName()+
                        custProduct.getItemId()+custOrder.getOrderNum());

                //custTask.setFreightSn();

                //地址，采购是订单表中的地址。刷单是t_buyers中拼接的地址（账户地址&城市&州&邮编）
                String address = null;
                if(custOrder.getDemandType() == 1){ // 采购
                    address = custOrder.getAddress();
                }else{ // 刷单
                    address = buyers.getAddress()+buyers.getCity()+buyers.getProvince()+buyers.getPostcode();
                }
                custTask.setAddress(address);

//                custTask.setReturnMoney();
                custTask.setAccountMoney(custAccount.getAccountMoney());
                custTask.setDepositMoney(custTaskExcelVo.getDepositMoney());
//                custTask.setCardsCode();
                custTask.setExecDate(custTaskExcelVo.getExecDate());
                custTask.setTaskState(0);
                custTask.setLiableUserId(pmUser.getUserId());
//                custTask.setTaskFinishTime();
//                custTask.setTaskFinishNote();
                custTask.setRemark(custTaskExcelVo.getRemark());
                custTask.setCreateDate(new Date());
                custTask.setCreateUserId(currentUser.getUserId());
                custTask.setModifyDate(new Date());
                custTask.setModifyUserId(currentUser.getUserId());

                this.mapper.insertSelective(custTask);

            } catch (Exception e) {
                e.printStackTrace();
                log.error("import task error, error task info: {}", JSON.toJSONString(custTaskExcelVo));
                result.put("error", "第"+(i+2)+"行数据有问题！");
                return result;
            }

        }
        return null;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Map<String,String> importReportSettingOk(CommonsMultipartFile file) throws Exception {
        ImportParams importParams = new ImportParams();
        importParams.setHeadRows(1);
        importParams.setTitleRows(0);
        List<TaskExcelVo> taskExcelVos = ExcelImportUtil.importExcel(file.getInputStream(),TaskExcelVo.class,importParams);
        if(taskExcelVos == null||taskExcelVos.isEmpty()){
            log.info("importReportSetting error, setting is empty!");
            return null;
        }
        UserCacheBean currentUser = CurrentUtil.getCurrentUser();
        boolean flag = true;
        for(int i=0;i<taskExcelVos.size();i++){
            TaskExcelVo taskExcelVo = taskExcelVos.get(i);
            if(StringUtils.isBlank(taskExcelVo.getCardsCode())||StringUtils.isBlank(taskExcelVo.getTaskCode())){
                flag = false;
            }
            if(taskExcelVo.getTaskState() == null){
                flag = false;
            }
            if(!flag){
                log.error("import orders error, error order info: {}", JSON.toJSONString(taskExcelVo));
                Map<String, String> result = new HashMap<>();
                result.put("error", "第"+(i+2)+"行数据有问题！");
                return result;
            }
        }
        for(TaskExcelVo taskExcelVo : taskExcelVos){
            List<TCustTask> custTaskVos = tCustTaskMapper.selectTaskByCode(taskExcelVo.getTaskCode());
            for(TCustTask custTask : custTaskVos){
                custTask.setModifyDate(new Date());
                custTask.setModifyUserId(CurrentUtil.getCurrentUser().getUserId());
                custTask.setTaskState(taskExcelVo.getTaskState());
                custTask.setCardsCode(taskExcelVo.getCardsCode());
                tCustTaskMapper.updateByPrimaryKeySelective(custTask);
            }
        }
        return Collections.EMPTY_MAP;
    }

}
