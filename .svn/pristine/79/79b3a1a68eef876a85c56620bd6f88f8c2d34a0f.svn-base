package com.samton.web.manage.order.service.impl;

import cn.afterturn.easypoi.excel.ExcelImportUtil;
import cn.afterturn.easypoi.excel.entity.ImportParams;
import com.samton.platform.common.service.impl.SuperServiceIntegerImpl;
import com.samton.platform.common.util.DateUtil;
import com.samton.platform.common.util.IdGen;
import com.samton.platform.framework.bean.UserCacheBean;
import com.samton.platform.framework.mybatis.pagination.PageContext;
import com.samton.platform.framework.mybatis.pagination.Pagination;
import com.samton.platform.framework.util.CurrentUtil;
import com.samton.web.manage.cust.bean.vo.CustProductVo;
import com.samton.web.manage.cust.dao.TCustProductMapper;
import com.samton.web.manage.finance.bean.vo.CustAccountVo;
import com.samton.web.manage.finance.dao.TCustAccountMapper;
import com.samton.web.manage.order.bean.entity.TCustOrder;
import com.samton.web.manage.order.bean.vo.CustOrderDto;
import com.samton.web.manage.order.bean.vo.CustOrderVo;
import com.samton.web.manage.order.bean.vo.OrderExcelVo;
import com.samton.web.manage.order.dao.TCustOrderMapper;
import com.samton.web.manage.order.enums.DemandTypeEnums;
import com.samton.web.manage.order.enums.OrderStatusEnums;
import com.samton.web.manage.order.service.ICustOrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @ClassName: CustOrderServiceImpl
 * @Description:
 * @Author: wuzhiqiang
 * @Date: 2020-04-16 18:10
 * @Copyright (c) 2020, Samton. All rights reserved
 **/
@Service
public class CustOrderServiceImpl extends SuperServiceIntegerImpl<TCustOrderMapper, TCustOrder> implements ICustOrderService {

    @Autowired
    private TCustProductMapper tCustProductMapper;

    @Autowired
    private TCustAccountMapper tCustAccountMapper;

    @Override
    public Pagination<CustOrderVo> queryOrderPageList(Pagination<CustOrderVo> paramBean) throws Exception {
        Pagination<CustOrderVo> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<CustOrderVo> list = mapper.queryOrderPageList(paramBean, pagination.getRowBounds());
        list.stream().forEach(custOrderVo -> {
            custOrderVo.setOrderStateCN(OrderStatusEnums.getDescByState(custOrderVo.getOrderState()));
            custOrderVo.setDemandTypeCN(DemandTypeEnums.getDescByState(custOrderVo.getDemandType()));
        });
        pagination.setData(list);
        return pagination;
    }

    @Override
    public Pagination<Map<String, Object>> exportOrderPageList(Pagination<CustOrderVo> paramBean) throws Exception {
        Pagination<Map<String, Object>> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<Map<String, Object>> list = mapper.exportOrderPageList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    @Override
    public CustOrderVo selectCustOrderById(Integer orderId) throws Exception {
        return mapper.selectOrderById(orderId);
    }

    @Override
    public void importOrders(CommonsMultipartFile file) throws Exception {
        ImportParams params = new ImportParams();
        params.setTitleRows(0);
        params.setHeadRows(1);
        final Date currentDate = new Date();
        List<OrderExcelVo> orderExcelVos = ExcelImportUtil.importExcel(file.getInputStream(), OrderExcelVo.class, params);

        //TODO 开始导入操作
    }

    @Override
    public String addCustOrder(CustOrderDto custOrderDto) throws Exception {
        String orderCode = IdGen.getBusinessCode("ORD" + custOrderDto.getDemandType());
        CustProductVo custProductVo = tCustProductMapper.selectProductByItemId(custOrderDto.getItemId());
        if(custProductVo == null){
            //新增
            custProductVo = new CustProductVo();
            custProductVo.setCustId(custOrderDto.getCustId());
            custProductVo.setPlatformType(custOrderDto.getPlatformType());
            custProductVo.setAccountsName(custOrderDto.getAccountsName());
            custProductVo.setItemId(custOrderDto.getItemId());
            custProductVo.setTitleKeyword(custOrderDto.getTitleKeyword());
            custProductVo.setIsDel(0);
            Date currentDate = new Date();
            UserCacheBean currentUser = CurrentUtil.getCurrentUser();
            custProductVo.setCreateDate(currentDate);
            custProductVo.setModifyDate(currentDate);
            custProductVo.setCreateUserId(currentUser.getUserId());
            custProductVo.setModifyUserId(currentUser.getUserId());
            tCustProductMapper.insertSelective(custProductVo);
        }
        BigDecimal unitPrice = custOrderDto.getUnitPrice();
        Integer orderNum = custOrderDto.getOrderNum();
        Integer frequency = custOrderDto.getFrequency();
        Integer cycle = custOrderDto.getCycle();
        TCustOrder custOrder = newCustOrder();
        custOrder.setOrderCode(orderCode);
        custOrder.setCustId(custOrderDto.getCustId());
        custOrder.setDemandType(custOrderDto.getDemandType());
        custOrder.setProductId(custProductVo.getProductId());
        custOrder.setAddress(custOrderDto.getAddress());
        custOrder.setUnitPrice(custOrderDto.getUnitPrice());
        custOrder.setOrderNum(custOrderDto.getOrderNum());
        custOrder.setTax(unitPrice.multiply(new BigDecimal(orderNum)).multiply(new BigDecimal(0.1)));
        custOrder.setRemark(custOrderDto.getRemark());
        custOrder.setTaskStartDate(custOrderDto.getTaskStartDate());
        custOrder.setFrequency(frequency);
        custOrder.setCycle(cycle);

        //获取汇率
        CustAccountVo custAccountVo = tCustAccountMapper.selectByCustId(custOrderDto.getCustId());
        BigDecimal dollarRate = custAccountVo.getDollarRate();
        custOrder.setDollarRate(dollarRate);
        BigDecimal totalMoney = null;
        //采购
        if(custOrderDto.getDemandType() == 1){
            totalMoney = unitPrice.multiply(new BigDecimal(orderNum)).multiply(new BigDecimal(1.1)).multiply(dollarRate);
        }
        //刷单
        if(custOrderDto.getDemandType() == 2){
            custOrder.setTaskEndDate(DateUtil.addDays(custOrderDto.getTaskStartDate(), custOrderDto.getCycle()));
            totalMoney = unitPrice.multiply(new BigDecimal(orderNum*frequency*cycle)).multiply(dollarRate);
        }
        custOrder.setOrderTotalMoney(totalMoney);
        int insert = mapper.insertSelective(custOrder);
        return insert >  0 ? orderCode : "";
    }

    private TCustOrder newCustOrder(){
        UserCacheBean currentUser = CurrentUtil.getCurrentUser();
        Date currentDate = new Date();
        TCustOrder custOrder = new TCustOrder();
        custOrder.setOrderState(0);
        custOrder.setReleaseTime(currentDate);
        custOrder.setReleaseUserId(Integer.parseInt(String.valueOf(currentUser.getUserId())));
        custOrder.setCreateDate(currentDate);
        custOrder.setModifyDate(currentDate);
        custOrder.setCreateUserId(currentUser.getUserId());
        custOrder.setModifyUserId(currentUser.getUserId());
        return custOrder;
    }
}