package com.samton.web.manage.task.controller;

import com.samton.platform.framework.base.BaseController;
import com.samton.platform.framework.constant.WebConstant;
import com.samton.platform.framework.exception.ServiceException;
import com.samton.platform.framework.mybatis.pagination.Pagination;
import com.samton.platform.pm.bean.entity.TSysLog;
import com.samton.platform.pm.constant.PmStateConstant;
import com.samton.platform.pm.service.ILogService;
import com.samton.web.manage.cust.constant.CustomerExpCodeConstant;
import com.samton.web.manage.task.bean.vo.CustTaskInfoVo;
import com.samton.web.manage.task.service.ICustTaskService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @Description: 任务报告Controller
 * @Author: YangYangen
 * @Date: 2020/4/20 16:11
 * Copyright (c) 2020, Samton. All rights reserved
*/
@Controller
@RequestMapping("/manage/task/")
public class CustTaskReportController extends BaseController {
    @Resource
    private ICustTaskService iCustTaskService;
    @Resource
    private ILogService logService;

    /**
     * 任务报告分页查询
     * @param paramBean
     * @param custTaskInfoVo
     * @return
     * @throws Exception
     */
    @RequestMapping("queryCustTaskReportList" + WebConstant.PAGE_SUFFIX)
    public String queryCustTaskReportList(Pagination<CustTaskInfoVo> paramBean, CustTaskInfoVo custTaskInfoVo) throws Exception {
        SimpleDateFormat sdfBegin = new SimpleDateFormat("yyyy-MM-01");
        SimpleDateFormat sdfEnd = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfParse = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        if (custTaskInfoVo.getExecDateBegin() == null) {
            custTaskInfoVo.setExecDateBegin(sdfParse.parse(sdfBegin.format(System.currentTimeMillis()) + " 00:00:00"));
        }
        if (custTaskInfoVo.getExecDateEnd() == null) {
            custTaskInfoVo.setExecDateEnd(sdfParse.parse(sdfEnd.format(System.currentTimeMillis()) + " 23:59:59"));
        }
        if(custTaskInfoVo.getTaskFinishTimeBegin() == null){
            custTaskInfoVo.setTaskFinishTimeBegin(sdfParse.parse(sdfBegin.format(System.currentTimeMillis()) + " 00:00:00"));
        }
        if(custTaskInfoVo.getTaskFinishTimeEnd() == null){
            custTaskInfoVo.setTaskFinishTimeEnd(sdfParse.parse(sdfEnd.format(System.currentTimeMillis()) + " 23:59:59"));
        }
        paramBean.setSearch(custTaskInfoVo);
        Pagination<CustTaskInfoVo> pageData = iCustTaskService.queryPageCustTaskInfoList(paramBean);

        this.addAttr("pageData", pageData);
        return "task/custTaskReportManage";
    }
    /**
     * 任务报告导出
     * @param paramBean
     * @param custTaskInfoVo
     * @return
     * @throws Exception
     */
    @RequestMapping("exportCustTaskReportList" + WebConstant.BUSINESS_SUFFIX)
    public String exportCustTaskReportList(Pagination<CustTaskInfoVo> paramBean, CustTaskInfoVo custTaskInfoVo) throws Exception {
        SimpleDateFormat sdfBegin = new SimpleDateFormat("yyyy-MM-01");
        SimpleDateFormat sdfEnd = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfParse = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        if (custTaskInfoVo.getExecDateBegin() == null) {
            custTaskInfoVo.setExecDateBegin(sdfParse.parse(sdfBegin.format(System.currentTimeMillis()) + " 00:00:00"));
        }
        if (custTaskInfoVo.getExecDateEnd() == null) {
            custTaskInfoVo.setExecDateEnd(sdfParse.parse(sdfEnd.format(System.currentTimeMillis()) + " 23:59:59"));
        }
        if(custTaskInfoVo.getTaskFinishTimeBegin() == null){
            custTaskInfoVo.setTaskFinishTimeBegin(sdfParse.parse(sdfBegin.format(System.currentTimeMillis()) + " 00:00:00"));
        }
        if(custTaskInfoVo.getTaskFinishTimeEnd() == null){
            custTaskInfoVo.setTaskFinishTimeEnd(sdfParse.parse(sdfEnd.format(System.currentTimeMillis()) + " 23:59:59"));
        }
        paramBean.setSearch(custTaskInfoVo);
        Pagination<Map<String, Object>> pageData = iCustTaskService.exportPageCustTaskInfoList(paramBean);
        logService.addLog(new TSysLog("任务报告-导出", "导出任务报告！", PmStateConstant.LOG_PLATFORM));

        String title = "任务编号,客户名称,电商平台,需求类型,买家账号代码,买家账户名称,卖家账号,产品ID,订单数量,商品单价($),税收($),订单金额(元),执行日期,任务状态,任务完成时间,负责人,任务完成时间状态";
        List<String> colNames = new ArrayList<String>();
        colNames.add("task_code");
        colNames.add("cust_name");
        colNames.add("platform_type");
        colNames.add("demand_type_cn");
        colNames.add("buyer_code");
        colNames.add("buyer_name");
        colNames.add("accounts_name");
        colNames.add("item_id");
        colNames.add("order_num");
        colNames.add("unit_price");
        colNames.add("tax");
        colNames.add("order_money");
        colNames.add("exec_date");
        colNames.add("task_state_cn");
        colNames.add("task_finish_time");
        colNames.add("liable_user_name");
        colNames.add("task_finish_note");
        this.export(response,"任务报告管理" + String.format("%1$tY%1$tm%1$td", new Date()), title, colNames, pageData);
        return null;
    }

    /**
     * 任务报告查看
     * @param taskId
     * @return
     * @throws Exception
     */
    @RequestMapping("viewCustTaskReport" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> viewCustTaskReport(Integer taskId) throws Exception {
        CustTaskInfoVo custTaskInfoVo = iCustTaskService.findCustTaskInfoById(taskId);
        return this.getResultMap(true, custTaskInfoVo);
    }

    /**
     * 编辑任务报告
     * @param custTaskInfoVo
     * @return
     * @throws Exception
     */
    @RequestMapping("editCustTaskReport" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> editCustTaskReport(CustTaskInfoVo custTaskInfoVo) throws Exception {
        //校验主键ID
        if(custTaskInfoVo.getTask() == null || custTaskInfoVo.getTask().getTaskId() == null){
            throw new ServiceException(CustomerExpCodeConstant.CUST_EDIT_COLUMN_ERROR);
        }
        //执行编辑
        boolean result = iCustTaskService.updateSelectiveById(custTaskInfoVo.getTask());
        if (result) {
            logService.addLog(new TSysLog("客户任务报告-编辑", "编辑客户任务报告【" + custTaskInfoVo.getTask().getTaskCode() + "】成功 ！", PmStateConstant.LOG_PLATFORM));
        } else {
            logService.addLog(new TSysLog("客户任务报告-编辑", "编辑客户任务报告【" + custTaskInfoVo.getTask().getTaskCode() + "】 失败！", PmStateConstant.LOG_PLATFORM));
        }
        if (!result) {
            throw new ServiceException(CustomerExpCodeConstant.CUST_EDIT_COLUMN_ERROR);
        }
        return this.getResultMap(true, result);
    }


    /**
     * Excel xls格式 批量设置完成导入
     * @param file
     * @return
     * @throws Exception
     */
    @RequestMapping("importReportSettingOk" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> importReportSetting(@RequestParam("file") CommonsMultipartFile file) throws Exception {
        //导入结果
       Map<String,String> stringStringMap = iCustTaskService.importReportSetting(file);
       String error = stringStringMap.get("error");
       String name = file.getOriginalFilename();
        TSysLog tSysLog = null;
        if(StringUtils.isBlank(error)) {
            tSysLog = new TSysLog("任务报告管理-批量设置任务完成状态", "导入设置状态【" + name + "】失败 ！", PmStateConstant.LOG_PLATFORM);
        }
        logService.addLog(tSysLog);
        return this.getResultMap(true, stringStringMap);
    }

    /**
     *
     * @author: ZhongShengbin
     * @date: 2020/4/27
     * @param request:
     * @param response:
     * @return: void
     */
    @RequestMapping("/downloadTemple" + WebConstant.NO_AUTH_SUFFIX)
    public void downloadTemple(HttpServletRequest request, HttpServletResponse response) {
        try {
            String fileName = "任务完成报告.xlsx";
            response.setCharacterEncoding("utf-8");
            response.setContentType("multipart/form-data");
            String agent = request.getHeader("USER-AGENT");
            if (agent.contains("MSIE") || agent.contains("Trident")) {
                fileName = java.net.URLEncoder.encode(fileName, "UTF-8");
            } else {
                //非IE浏览器的处理：
                fileName = new String(fileName.getBytes("UTF-8"), "ISO-8859-1");
            }
            response.setHeader("Content-Disposition", "attachment;fileName=" + fileName);

            String tempFile = null;
            tempFile = "templateDownload/custTaskReportSettingOk.xlsx";
            OutputStream outputStream = response.getOutputStream();
            InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream(tempFile);
            byte[] data = new byte[1024];
            int read = 0;
            while ((read = resourceAsStream.read(data)) != -1) {
                outputStream.write(data, 0, read);
            }
            resourceAsStream.close();
            outputStream.close();
        } catch (Exception e) {

        }
    }
}
