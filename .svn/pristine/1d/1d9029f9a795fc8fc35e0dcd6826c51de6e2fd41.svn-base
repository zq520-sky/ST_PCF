package com.samton.web.manage.order.controller;

import com.samton.platform.framework.base.BaseController;
import com.samton.platform.framework.constant.WebConstant;
import com.samton.platform.framework.exception.ServiceException;
import com.samton.platform.framework.mybatis.pagination.Pagination;
import com.samton.platform.pm.bean.entity.TSysLog;
import com.samton.platform.pm.constant.PmStateConstant;
import com.samton.platform.pm.service.ILogService;
import com.samton.web.manage.cust.bean.entity.TCustomer;
import com.samton.web.manage.cust.constant.CustomerExpCodeConstant;
import com.samton.web.manage.order.bean.vo.CustOrderDto;
import com.samton.web.manage.order.bean.vo.CustOrderVo;
import com.samton.web.manage.order.enums.DemandTypeEnums;
import com.samton.web.manage.order.enums.OrderStatusEnums;
import com.samton.web.manage.order.service.ICustOrderService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @ClassName: CustOrderController
 * @Description:
 * @Author: wuzhiqiang
 * @Date: 2020-04-16 18:09
 * @Copyright (c) 2020, Samton. All rights reserved
 **/
@Controller
@RequestMapping("/manage/cust/order/")
public class CustOrderController extends BaseController {

    @Resource
    private ICustOrderService custOrderService;
    @Resource
    private ILogService logService;

    /**
     * 需求订单管理分页（管理端）
     * @author: wuzhiqiang
     * @date: 2020/4/21
     * @param paramBean:
     * @param custOrderVo:
     * @param type: 1: 管理端， 2：客户端
     * @return: java.lang.String
     */
    @RequestMapping("{type}/queryCustOrderList" + WebConstant.PAGE_SUFFIX)
    public String queryCustOrderList(Pagination<CustOrderVo> paramBean, CustOrderVo custOrderVo, @PathVariable("type") Integer type) throws Exception{
        String view = "";
        switch (type){
            case 1:
                view = "order/custOrderManage";
                break;
            case 2:
                view = "order/custOrderClient";
                break;
            default:
                break;
        }
        Date currentDate = new Date();
        if(custOrderVo.getReleaseTimeBegin() == null){
            custOrderVo.setReleaseTimeBegin(currentDate);
        }
        if(custOrderVo.getReleaseTimeEnd() == null){
            custOrderVo.setReleaseTimeEnd(currentDate);
        }
        if(custOrderVo.getTaskStartDateBegin() == null){
            custOrderVo.setTaskStartDateBegin(currentDate);
        }
        if(custOrderVo.getTaskStartDateEnd() == null){
            custOrderVo.setTaskStartDateEnd(currentDate);
        }
        paramBean.setSearch(custOrderVo);
        Pagination<CustOrderVo> pageData = custOrderService.queryOrderPageList(paramBean);
        this.addAttr("pageData", pageData);
        return view;
    }


    /**
     * 需求订单管理导出（管理端）
     * @author: wuzhiqiang
     * @date: 2020/4/21
     * @param paramBean:
     * @param custOrderVo:
     * @param type: 1:管理端， 2：客户端
     * @return: java.lang.String
     */
    @RequestMapping("{type}/exportCustOrderList" + WebConstant.BUSINESS_SUFFIX)
    public String exportCustOrderList(Pagination<CustOrderVo> paramBean, CustOrderVo custOrderVo, @PathVariable("type") Integer type) throws Exception {
        paramBean.setSearch(custOrderVo);
        Pagination<Map<String, Object>> pageData = custOrderService.exportOrderPageList(paramBean);
        String moduleName = "";
        String operateDesc = "";
        String sheetName = "";
        switch (type){
            case 1:
                moduleName = "需求订单管理-导出(管理端)";
                operateDesc = "导出需求订单信息(管理端)！";
                sheetName = "客户订单信息管理";
                break;
            case 2:
                moduleName = "需求订单管理-导出";
                operateDesc = "导出需求订单信息！";
                sheetName = "订单信息管理";
                break;
            default:
                break;
        }
        logService.addLog(new TSysLog(moduleName, operateDesc, PmStateConstant.LOG_PLATFORM));
        String title = "订单编号,需求类型,电商平台,卖家账号（店铺名称）,产品ID,标题（关键词）,地址,商品单价（$），订单数量, 税收（$），刷单频次,刷单周期（天）,美元汇率,订单总额（元）,任务开始日期,订单状态,发布人,发布日期";
        List<String> colNames = new ArrayList<String>();
        colNames.add("order_code");
        colNames.add("demand_type");
        pageData.putExprotKV("demand_type", "1", "采购");
        pageData.putExprotKV("demand_type", "2", "刷单");
        colNames.add("platform_type");
        colNames.add("accounts_name");
        colNames.add("item_id");
        colNames.add("title_keyword");
        colNames.add("address");
        colNames.add("unit_price");
        colNames.add("order_num");
        colNames.add("tax");
        colNames.add("frequency");
        colNames.add("cycle");
        colNames.add("dollar_rate");
        colNames.add("order_total_money");
        colNames.add("task_start_date");
        colNames.add("order_state");
        pageData.putExprotKV("order_state", "0", "未开始");
        pageData.putExprotKV("order_state", "1", "进行中");
        pageData.putExprotKV("order_state", "2", "已完成");
        pageData.putExprotKV("order_state", "3", "已取消");
        colNames.add("release_user_name");
        colNames.add("release_time");
        this.export(response,sheetName + String.format("%1$tY%1$tm%1$td", new Date()), title, colNames, pageData);
        return null;
    }

    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/21
     * @param orderId:
     * @return: java.util.Map<java.lang.String,java.lang.Object>
     */
    @RequestMapping("viewCustOrder" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> viewCustomer(Integer orderId) throws Exception {
        CustOrderVo custOrderVo = custOrderService.selectCustOrderById(orderId);
        custOrderVo.setDemandTypeCN(DemandTypeEnums.getDescByState(custOrderVo.getDemandType()));
        custOrderVo.setOrderStateCN(OrderStatusEnums.getDescByState(custOrderVo.getOrderState()));
        return this.getResultMap(true, custOrderVo);
    }

    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/22
     * @param file: 
     * @return: java.util.Map<java.lang.String,java.lang.Object>
     */
    @RequestMapping("importOrders" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> importOrders(@RequestParam("file") CommonsMultipartFile file) throws Exception {
        custOrderService.importOrders(file);
        return this.getResultMap(true, null);
    }

    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/22
     * @param custOrderDto: 
     * @return: java.util.Map<java.lang.String,java.lang.Object>
     */
    @RequestMapping("addCustOrder" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> addCustOrder(CustOrderDto custOrderDto) throws Exception {
        //执行新增
        String orderCode = custOrderService.addCustOrder(custOrderDto);
        if (StringUtils.isNoneBlank(orderCode)) {
            logService.addLog(new TSysLog("客户需求订单管理-新增", "新增客户需求订单【" +orderCode+ "】成功 ！", PmStateConstant.LOG_PLATFORM));
        } else {
            logService.addLog(new TSysLog("客户需求订单管理-新增", "新增客户需求订单【" + orderCode + "】 失败！", PmStateConstant.LOG_PLATFORM));
        }
        if (StringUtils.isBlank(orderCode)) {
            throw new ServiceException(CustomerExpCodeConstant.CUST_ADD_COLUMN_ERROR);
        }
        return this.getResultMap(true, orderCode);
    }

    /**
     *
     * @author: wuzhiqiang
     * @date: 2020/4/23
     * @param custOrderDto:
     * @return: java.util.Map<java.lang.String,java.lang.Object>
     */
    @RequestMapping("updateCustOrder" + WebConstant.BUSINESS_SUFFIX)
    @ResponseBody
    public Map<String, Object> updateCustOrder(CustOrderDto custOrderDto) throws Exception {
        //执行更新
        boolean result = custOrderService.updateCustOrder(custOrderDto);
        if (result) {
            logService.addLog(new TSysLog("客户需求订单管理-修改", "修改客户需求订单【" +custOrderDto.getOrderCode()+ "】成功 ！", PmStateConstant.LOG_PLATFORM));
        } else {
            logService.addLog(new TSysLog("客户需求订单管理-修改", "修改客户需求订单【" + custOrderDto.getOrderCode() + "】 失败！", PmStateConstant.LOG_PLATFORM));
        }
        if (!result) {
            throw new ServiceException(CustomerExpCodeConstant.CUST_ADD_COLUMN_ERROR);
        }
        return this.getResultMap(true, result);
    }

    @RequestMapping("downloadTemple" + WebConstant.NO_AUTH_SUFFIX)
    public void downloadTemple(HttpServletRequest request, HttpServletResponse response) {
        try {
            String fileName = "客户需求模板.csv";
            response.setCharacterEncoding("utf-8");
            response.setContentType("multipart/form-data");
            String agent = request.getHeader("USER-AGENT");
            if (agent.contains("MSIE") || agent.contains("Trident")) {
                fileName = java.net.URLEncoder.encode(fileName, "UTF-8");
            } else {
                //非IE浏览器的处理：
                fileName = new String(fileName.getBytes("UTF-8"), "ISO-8859-1");
            }
            response.setHeader("Content-Disposition", "attachment;fileName=" + fileName);

            OutputStream outputStream = response.getOutputStream();
            InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream("custOrderTemplet.csv");
            byte[] data = new byte[1024];
            int read = 0;
            while ((read = resourceAsStream.read(data)) != -1) {
                outputStream.write(data, 0, read);
            }
            resourceAsStream.close();
            outputStream.close();
        } catch (Exception e) {

        }
    }
}