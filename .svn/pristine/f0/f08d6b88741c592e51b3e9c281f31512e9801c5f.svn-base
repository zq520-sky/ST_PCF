package com.samton.web.manage.task.service.impl;

import cn.afterturn.easypoi.excel.ExcelImportUtil;
import cn.afterturn.easypoi.excel.entity.ImportParams;
import com.alibaba.fastjson.JSON;
import com.samton.platform.common.service.impl.SuperServiceIntegerImpl;
import com.samton.platform.framework.bean.UserCacheBean;
import com.samton.platform.framework.mybatis.pagination.PageContext;
import com.samton.platform.framework.mybatis.pagination.Pagination;
import com.samton.platform.framework.util.CurrentUtil;
import com.samton.web.manage.order.enums.DemandTypeEnums;
import com.samton.web.manage.order.service.impl.CustOrderServiceImpl;
import com.samton.web.manage.task.bean.entity.TCustTask;
import com.samton.web.manage.task.bean.vo.CustTaskInfoVo;
import com.samton.web.manage.task.bean.vo.CustTaskVo;
import com.samton.web.manage.task.bean.vo.TaskExcelVo;
import com.samton.web.manage.task.dao.TCustTaskMapper;
import com.samton.web.manage.task.service.ICustTaskService;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @Description: 客户消费记录实现类
 * @Author: ZhongShengbin
 * @Date: 2020/04/15 16:31
 * Copyright (c) 2019, Samton. All rights reserved
 */
@Service
public class CustTaskServiceImpl extends SuperServiceIntegerImpl<TCustTaskMapper, TCustTask> implements ICustTaskService {
    public static final Logger log = LoggerFactory.getLogger(CustOrderServiceImpl.class);
    @Autowired
    private TCustTaskMapper tCustTaskMapper;
    @Override
    public Pagination<CustTaskVo> queryTaskPageList(Pagination<CustTaskVo> paramBean) throws Exception {
        Pagination<CustTaskVo> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<CustTaskVo> list = mapper.queryPageTaskList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    @Override
    public Pagination<Map<String, Object>> exportTaskPageList(Pagination<CustTaskVo> paramBean) throws Exception {
        Pagination<Map<String, Object>> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<Map<String, Object>> list = mapper.exportTaskInfoList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    @Override
    public CustTaskVo selectTaskVoById(Integer itemId, Integer productId) throws Exception {
        return this.mapper.selectTaskVoById(itemId, productId);
    }

    /**
     * 任务信息分页查询
     * @param paramBean
     * @return
     */
    @Override
    public Pagination<CustTaskInfoVo> queryPageCustTaskInfoList(Pagination<CustTaskInfoVo> paramBean) throws Exception {
        Pagination<CustTaskInfoVo> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<CustTaskInfoVo> list = mapper.queryPageCustTaskInfoList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    /**
     * 任务信息导出
     * @param paramBean
     */
    @Override
    public Pagination<Map<String, Object>> exportPageCustTaskInfoList(Pagination<CustTaskInfoVo> paramBean) throws Exception {
        Pagination<Map<String, Object>> pagination = PageContext.initialize(paramBean.getPage(), paramBean.getRows());
        List<Map<String, Object>> list = mapper.exportPageCustTaskInfoList(paramBean, pagination.getRowBounds());
        pagination.setData(list);
        return pagination;
    }

    /**
     * 任务信息查看
     * @param taskId
     */
    @Override
    public CustTaskInfoVo findCustTaskInfoById(Integer taskId) throws Exception {
        return this.mapper.selectCustTaskInfoById(taskId);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Map<String,String> importReportSetting(CommonsMultipartFile file) throws Exception {
        ImportParams importParams = new ImportParams();
        importParams.setHeadRows(1);
        importParams.setTitleRows(0);
        List<TaskExcelVo> taskExcelVos = ExcelImportUtil.importExcel(file.getInputStream(),TaskExcelVo.class,importParams);
        if(taskExcelVos == null||taskExcelVos.isEmpty()){
            log.info("importReportSetting error, setting is empty!");
            return null;
        }
        UserCacheBean currentUser = CurrentUtil.getCurrentUser();
        boolean flag = true;
        for(int i=0;i<taskExcelVos.size();i++){
            TaskExcelVo taskExcelVo = taskExcelVos.get(i);
            if(StringUtils.isBlank(taskExcelVo.getCardsCode())||StringUtils.isBlank(taskExcelVo.getTaskCode())){
                flag = false;
            }
            if(taskExcelVo.getTaskState() == null){
                flag = false;
            }
            if(!flag){
                log.error("import orders error, error order info: {}", JSON.toJSONString(taskExcelVo));
                Map<String, String> result = new HashMap<>();
                result.put("error", "第"+(i+2)+"行数据有问题！");
                return result;
            }
        }
        for(TaskExcelVo taskExcelVo : taskExcelVos){
            List<TCustTask> custTaskVos = tCustTaskMapper.selectTaskByCode(taskExcelVo.getTaskCode());
            for(TCustTask custTask : custTaskVos){
                custTask.setTaskState(taskExcelVo.getTaskState());
                custTask.setCardsCode(taskExcelVo.getCardsCode());
                tCustTaskMapper.updateByPrimaryKeySelective(custTask);
            }
        }
        return Collections.EMPTY_MAP;
    }

}
